{"name":"Tabnabtor","tagline":"Helping you with \"A New Type of Phishing Attack\"","body":"tabnabtor\r\n=========\r\n\r\nHelping you with \"A New Type of Phishing Attack\"\r\n\r\n (http://www.azarask.in/blog/post/a-new-type-of-phishing-attack/)\r\nand does some extra stuff\r\n\r\nHow to use\r\n===\r\n1. Just import all the files in the 'app' folder into (your) website.\r\n  If for a reason it is more convenient to import one file, then\r\n  copy the contents of all the files into one and import that.\r\n2. Change the min_timeout and max_timeout. A random number of milliseconds\r\n  between these two values will be counted down from and then the page\r\n  will display your fake page.\r\n3. Make your webpage object. Write your fake webpage's source code as a\r\n  comment in a function which should be passed as a second argument to the\r\n  constructor (see example in webpage.js).\r\n4. Make sure your fake webpage redirects the victim to a website of yours\r\n  after login, which stores its credentials and then redirects to the real\r\n  version of the fake website.\r\n\r\nWhat it does\r\n===\r\n- Implements Tabnabbing (check out http://www.azarask.in/blog/post/a-new-type-of-phishing-attack/)\r\n  By importing the app files into an HTML page.\r\n- Decides which website the victim visits more often\r\n  so that its counterfeit can be constructed.\r\n\r\nWhat is also does\r\n===\r\n- Clears all the page's elements, leaving it blank:\r\n  By calling clear_page_contents()\r\n- Dynamically changes the page's favicon:\r\n  By calling change_fav_icon(url)\r\n\r\nWhat it will (probably) do in the future\r\n===\r\n- Dynamically construct webpage source code and\r\n  webpage objects.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}